#!/usr/bin/env php

<?php

include_once 'kern.php';

use app\Core\Container;

class Console
{
    private  $commands =[];
    const FONT_COLORES = [
            "Black"     =>	"0;30",
            "Dark Grey" =>	"1;30",
            "Red"       =>	"0;31",
            "Light Red" =>	"1;31",
            "Green"     =>	"0;32",
            "Light Green" =>	"1;32",
            "Brown"     =>	"0;33",
            "Yellow"    =>	"1;33",
            "Blue"      =>	"0;34",
            "Light Blue" =>	"1;34",
            "Magenta"    =>	"0;35",
            "Light Magenta" =>	"1;35",
            "Cyan"       =>	"0;36",
            "Light Cyan" =>	"1;36",
            "Light Grey" =>	"0;37",
            "White"      =>	"1;37",
        ];

    const BG_COLORES = [
            "Black"	=> "40",
            "Red"	=> "41",
            "Green"	=> "42",
            "Yellow"	=> "43",
            "Blue"	=> "44",
            "Magenta"	=> "45",
            "Cyan"	=> "46",
            "Light Grey"	=> "47",
        ];

    const TYPES = [
        'info' => [
            'font_color'  => self::FONT_COLORES['Light Blue'],
            'bg_color'    => self::BG_COLORES['Black'],
        ],
        'error' => [
            'font_color'  => self::FONT_COLORES['White'],
            'bg_color'    => self::BG_COLORES['Red'],
        ],
        'success' => [
            'font_color'  => self::FONT_COLORES['Yellow'],
            'bg_color'    => self::BG_COLORES['Cyan'],
        ],
        'warning' => [
            'font_color'  => self::FONT_COLORES['Yellow'],
            'bg_color'    => self::BG_COLORES['Black'],
        ],
    ];
    /**
     * @var Container
     */
    private $container;

    public function __construct(Container $container)
    {
        $this->container = $container;
        $this->commands = $container->getConsoleComands();
    }


    public function handleInput($argc, $argv){

        if ($argc === 1){
            $this->logInfo();
        }else{
            // command name
            $commandName = $argv[1];
            $alreadyConfirmd = in_array('--force', $argv);
            // check if command name registerd in app
            if (!isset($this->commands[$commandName])){
              $this->logInfo();
              return 0;
            }
            $command = $this->commands[$commandName];
            if ($command->needConformation()){
                if (!$alreadyConfirmd){
                  $this->colorize('please enter the command with --force to confirm.', 'info');
                  $this->colorize($commandName.' --force ', 'warning');
                  return 0;
                }
            }
            try{
              $reslt = $command->run($this->container);
              if ($reslt){
                $this->colorize($reslt['msg'], $reslt['status']);
                if (isset($reslt['output'])){
                  if (isset($reslt['output_type'])){
                    if ($reslt['output_type'] === 'table'){
                      $this->printTable($reslt['output']);
                    }else{
                      $this->colorize($reslt['output'], 'info');
                    }
                  }
                }
                return;
              }
            }catch (Exception $e){
              $this->colorize($e->getMessage(), 'error');
              return;
            }
        }

    }



    private function colorize($text, $type){
        $esc = "\033";
        $brackt = "[";
        $semi = ";";
        $m = "m";

        $newline = "\n";
        $closeColoring = "[0m";
        $endTag = $esc.$closeColoring;

        switch ($type){
            case 'info':
              echo $esc.$brackt
                  .self::TYPES['info']['font_color']
                  .$semi.self::TYPES['info']['bg_color'].$m
                  .$text
                  .$esc.$closeColoring.$newline
              ;
              break;
            case 'error':
              echo $esc.$brackt
                  .self::TYPES['error']['font_color']
                  .$semi.self::TYPES['error']['bg_color'].$m
                  .$text
                  .$esc.$closeColoring.$newline
              ;
              break;
            case 'success':
              echo $esc.$brackt
                  .self::TYPES['success']['font_color']
                  .$semi.self::TYPES['success']['bg_color'].$m
                  .$text
                  .$esc.$closeColoring.$newline
              ;
              break;
            case 'warning':
              echo $esc.$brackt
                  .self::TYPES['warning']['font_color']
                  .$semi.self::TYPES['warning']['bg_color'].$m
                  .$text
                  .$esc.$closeColoring.$newline
              ;
              break;

        }
    }

    private function logInfo(){

        $this->colorize('Did you mean: ', 'error');
        foreach ($this->commands as $command){
            $this->colorize($command->getName(), 'info');
        }
    }

    private function printTable(array $table){

      if (isset($table['headers'])){
        $headers = explode(',', $table['headers']);

        $arr = [];
        $space = '  ';
        $t_header = '';
        foreach ($headers as $header){
            $t_header .= $header
                  .$this->getSpaces($table['chars'][$header]-strlen($header))
                  .$space
            ;
        }

//        var_dump($t_header); die();
        $arr[] = $t_header;
        for ($i = 0; $i < count($table[$headers[0]]); $i++){
          $row = '';
          foreach ($headers as $header){
              $row .= $table[$header][$i]
              .$this->getSpaces($table['chars'][$header]-strlen($table[$header][$i]))
              .$space;
          }
          $arr[] = $row;
        }
        foreach ($arr as $item){
          $this->colorize($item, 'info');
        }
      }
    }

    private function getSpaces(int $num){
      $space = '';
      for ($i = 0; $i <= $num; $i++){
        $space .= ' ';
      }
      return $space;
    }

}

$console = new Console($container);
$console->handleInput($argc, $argv);





